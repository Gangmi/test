package c_control;

public class Ex07_break_개념 {

	public static void main(String[] args) {
		
		HERE: // 이것을 라벨이라고 하고 
		for (int i=0; i<2; i++) {// 3행에 대한 반복문

			for (int j=0; j<3; j++) {// 2열에 대한 반복문
				
//				if(j==1) break ; // j=1이 되는 순간에 반복문을 빠져나감 -> 이렇게 하면 j 가 1 이 되는 모든 순간에 반복문을 나가게 되고 다시 i값을 증가시킴
//				if(j==1) break Here; // 라벨이 붙어있는 반복문 까지 한 번에 빠져 나간다.
//				
//				if(j==1) continue; //블럭 끝으로 가기
				if(j==1) continue HERE; // 라벨이 붙어 있는 곳 까지 나가서 다시 실행 한다. 그 아래에 있는 코드가 실행 되지 않더라도 그 반복문을 실행한 것이 되면서
										//밖에 있는 반복문의 값은 증가한다.
				
//					
				
				System.out.printf("<%d, %d> \n",i,j); // 좌표를 보기 위한 코드 \n 한 줄 띄는것이다.
				
			}
			System.out.println("데이타");
		}
		// break; 를사용하는경우에는 바로 반복문을 끝내서 좌표를 j=0 일때만 좌표를 찍기 때문에
		/*
		 * <0 , 0>	
		 * 데이타			
		 * <1 , 0>
		 * 데이타
		 * 가 나오게 되고 
		 * 
		 * continue를 사용 했을 때에는 반복문을 탈출하는 것이 아니라 즉시 그 차례의 continue 아래있는 것을 무시하고 맨위로 올라가서 다시 반복문을 수행 한다.
		 * 따라서
		 * 0,0 
		 * 0,1 - > 찍히지 않음 continue에 의해 
		 * 0,2 -> 반복문자체를 나가지 않기 때문에
		 * 반복문 끝
		 * 데이타 출력
		 * i값 증가 , i는 참 
		 * 반복문 진입 j=0 ,j <3 참 이되고
		 * j값이 1이 아니기때문에  수행문 실행
		 * <1 , 0> 출력
		 * j값을 1 더함
		 * j<3 을 만족 참 
		 * j=1 이기때문에 즉시 이번 반복을 종료하고 j값을 1더함
		 * j=2 가 되고 if문에 의해 걸러지지 않기 때문에 
		 * <<1,2> 출력
		 * 데이타 출력
		 * i값증가 
		 *  i =2 이기때문에 조건식 거짓으로 반복문 종료
		 * ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		 * 쉬는 시간이후
		 * 원래 break; 는 가장 가까운 반복문의 끝으로 그 반복문을 벗어난다.
		 * 그런데 그위에 있는 반복문 까지 벗어나고 싶다면
		 * 라벨을 써 줄 수 있다.
		 * 라벨의 이름은 대문자를 쓰고 break 라벨 ; 부터 위의 라벨 까지 한 번에 나가게 된다.
		 * 
		 * 
		 * 
		 * 
		 */
		

	}

}
